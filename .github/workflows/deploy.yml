name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/stock-control-backend:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/stock-control-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=https://api.${{ secrets.DOMAIN }}/api
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/stock-control-frontend:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/stock-control-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: deploy
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            set -e
            cd /home/deploy/apps/stock-control
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            
            # Create/update .env file with secrets
            cat > .env << EOF
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            DOMAIN=${{ secrets.DOMAIN }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            AFIP_MODE=${{ secrets.AFIP_MODE }}
            RATE_LIMIT_WINDOW_MS=900000
            RATE_LIMIT_MAX_REQUESTS=100
            EOF
            
            # Pull new images
            docker compose -f docker-compose.prod.yml pull
            
            # Stop and start services
            docker compose -f docker-compose.prod.yml down
            docker compose -f docker-compose.prod.yml up -d
            
            # Cleanup old images
            docker image prune -f
            
            # Health check
            sleep 30
            curl -f http://localhost/api/health || exit 1