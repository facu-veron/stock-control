name: Build & Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # APP (Next)
      - name: Build & push app image
        uses: docker/build-push-action@v6
        with:
          context: ./stockcontrol-frontend
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository }}/stockcontrol-app:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository }}/stockcontrol-app:latest

      # API (Node)
      - name: Build & push api image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository }}/stockcontrol-api:${{ env.IMAGE_TAG }}
            ghcr.io/${{ github.repository }}/stockcontrol-api:latest

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}      
          username: ${{ secrets.SSH_USER }}  
          key: ${{ secrets.SSH_KEY }}        
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            set -e
            cd /home/deploy/apps/stockcontrol
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            export IMAGE_TAG=${{ github.sha }}
            docker compose -f docker-compose.prod.yml --env-file .env pull
            docker compose -f docker-compose.prod.yml --env-file .env up -d
            docker image prune -f
