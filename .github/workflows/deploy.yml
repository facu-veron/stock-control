name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Production VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_DEPLOY_SSH_KEY }}
        script: |
          echo "🚀 Iniciando deploy de Stock Control..."
          
          # Directorio de trabajo
          DEPLOY_DIR="/home/deploy/stockcontrol"
          sudo mkdir -p $DEPLOY_DIR
          sudo chown -R deploy:deploy $DEPLOY_DIR
          cd $DEPLOY_DIR
          
          # Limpiar directorio anterior si existe
          if [ -d "backend" ]; then
            echo "🧹 Limpiando archivos anteriores..."
            sudo rm -rf backend frontend nginx postgres-init docker-compose.prod.yml Makefile || true
          fi
          
          # Clonar o actualizar repositorio
          if [ ! -d "stock-control" ]; then
            echo "📥 Clonando repositorio..."
            git clone https://github.com/${{ github.repository }}.git stock-control
          else
            echo "🔄 Actualizando código..."
            cd stock-control
            git fetch origin
            git reset --hard origin/main
            cd ..
          fi
          
          # Copiar archivos necesarios desde el repo
          echo "📁 Preparando archivos..."
          cp -r stock-control/backend ./
          cp -r stock-control/frontend ./
          cp -r stock-control/nginx ./
          cp -r stock-control/postgres-init ./
          cp stock-control/docker-compose.prod.yml ./
          cp stock-control/Makefile ./
          
          # Asegurar permisos correctos
          sudo chown -R deploy:deploy backend frontend nginx postgres-init
          
          # Crear archivo de variables de entorno para producción
          cat > .env.prod << 'ENV_EOF'
          PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          PROD_JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
          ENV_EOF
          
          # Crear directorio SSL si no existe
          mkdir -p ssl
          
          # Si no existen certificados SSL, generar certificados temporales
          if [ ! -f "ssl/live/stockcontrol.unlimitdevsoftware.com/fullchain.pem" ]; then
            echo "🔐 Generando certificados SSL temporales..."
            mkdir -p ssl/live/stockcontrol.unlimitdevsoftware.com
            
            # Generar certificados auto-firmados temporales
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout ssl/live/stockcontrol.unlimitdevsoftware.com/privkey.pem \
              -out ssl/live/stockcontrol.unlimitdevsoftware.com/fullchain.pem \
              -subj "/C=AR/ST=BuenosAires/L=BuenosAires/O=UnlimitDev/CN=stockcontrol.unlimitdevsoftware.com"
            
            echo "⚠️  Usando certificados temporales. Genera certificados Let's Encrypt después del deploy."
          fi
          
          # Detener servicios existentes
          echo "🛑 Deteniendo servicios existentes..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod down || true
          
          # Limpiar imágenes antiguas
          echo "🧹 Limpiando imágenes antiguas..."
          docker image prune -f || true
          
          # Levantar servicios
          echo "🐳 Levantando servicios..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d --build
          
          # Esperar que los servicios estén listos
          echo "⏳ Esperando que los servicios estén listos..."
          sleep 60
          
          # Ejecutar migraciones de Prisma
          echo "🗄️ Ejecutando migraciones..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T backend npx prisma migrate deploy || echo "❌ Error en migraciones, continuando..."
          
          # Verificar estado de servicios
          echo "✅ Verificando servicios..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod ps
          
          # Verificar conectividad
          echo "🌐 Verificando conectividad..."
          sleep 15
          
          # Verificar que Nginx esté funcionando
          NGINX_STATUS=$(docker-compose -f docker-compose.prod.yml --env-file .env.prod ps nginx | grep -o "Up\|Restarting\|Exited" || echo "Unknown")
          echo "📊 Estado de Nginx: $NGINX_STATUS"
          
          if [ "$NGINX_STATUS" = "Restarting" ]; then
            echo "⚠️  Nginx está reiniciando, verificando logs..."
            docker-compose -f docker-compose.prod.yml --env-file .env.prod logs nginx | tail -20
            echo "🔄 Intentando reiniciar Nginx..."
            docker-compose -f docker-compose.prod.yml --env-file .env.prod restart nginx
            sleep 10
          fi
          
          # Probar conectividad HTTP
          curl -I http://localhost:80 || echo "❌ HTTP no responde (normal si SSL está funcionando)"
          
          # Verificar si los servicios están respondiendo internamente
          echo "🔍 Verificando servicios internos..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T frontend wget -qO- http://localhost:3000 > /dev/null && echo "✅ Frontend OK" || echo "❌ Frontend no responde"
          docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T backend wget -qO- http://localhost:3001 > /dev/null && echo "✅ Backend OK" || echo "❌ Backend no responde"
          
          echo "🎉 Deploy completado!"
          echo ""
          echo "📋 Para obtener certificados SSL reales, ejecuta:"
          echo "   make ssl-generate"
          echo ""
          echo "🌐 URLs disponibles:"
          echo "   HTTP:  http://stockcontrol.unlimitdevsoftware.com"
          echo "   HTTPS: https://stockcontrol.unlimitdevsoftware.com (certificado temporal)"
          
    - name: Notify Success
      if: success()
      run: echo "✅ Deploy exitoso a producción"
        
    - name: Notify Failure
      if: failure()
      run: echo "❌ Deploy falló - revisar logs"