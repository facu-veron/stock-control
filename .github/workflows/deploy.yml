name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test SSH Connectivity First
      run: |
        echo "üîç Testing SSH connectivity to ${{ secrets.PROD_HOST }}"
        # Test common SSH ports
        for port in 22 2222 2022 22222; do
          echo "Testing port $port..."
          if timeout 10s bash -c "</dev/tcp/${{ secrets.PROD_HOST }}/$port" 2>/dev/null; then
            echo "‚úÖ Port $port is open"
          else
            echo "‚ùå Port $port is closed or filtered"
          fi
        done

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_DEPLOY_SSH_KEY }}
        port: 22
        timeout: 30s
        command_timeout: 10m
        script: |
          echo "üöÄ Iniciando deploy de Stock Control..."
          
          # Directorio de trabajo (usando root)
          DEPLOY_DIR="/root/stockcontrol"
          
          echo "üë§ Usuario: $(whoami)"
          echo "üìÅ Deploy dir: $DEPLOY_DIR"
          
          # Crear directorio de trabajo
          mkdir -p $DEPLOY_DIR || true
          cd $DEPLOY_DIR
          
          # Limpiar completamente y empezar de cero
          echo "üßπ Limpieza completa del directorio..."
          docker system prune -af --volumes || true
          rm -rf backend frontend nginx postgres-init docker-compose.prod.yml Makefile ssl || true
          
          # Clonar o actualizar repositorio
          if [ ! -d "stock-control" ]; then
            echo "üì• Clonando repositorio..."
            git clone https://github.com/${{ github.repository }}.git stock-control
          else
            echo "üîÑ Actualizando c√≥digo..."
            cd stock-control
            git fetch origin
            git reset --hard origin/main
            cd ..
          fi
          
          # Copiar archivos necesarios desde el repo
          echo "üìÅ Preparando archivos..."
          cp -r stock-control/backend ./
          cp -r stock-control/frontend ./
          cp -r stock-control/nginx ./
          cp -r stock-control/postgres-init ./
          cp stock-control/docker-compose.prod.yml ./
          cp stock-control/Makefile ./
          cp stock-control/setup-ssl.sh ./
          
          # Crear archivo de variables de entorno para producci√≥n
          cat > .env.prod << 'ENV_EOF'
          PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          PROD_JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}
          ENV_EOF
          
          # Crear directorio SSL
          mkdir -p ssl ssl/webroot
          
          # Detener servicios existentes si existen
          echo "üõë Deteniendo servicios existentes..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod down || true
          
          # Limpiar im√°genes antiguas
          echo "üßπ Limpiando im√°genes antiguas..."
          docker image prune -f || true
          
          # Levantar servicios
          echo "üê≥ Levantando servicios..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d --build
          
          # Esperar que los servicios est√©n listos
          echo "‚è≥ Esperando que los servicios est√©n listos..."
          sleep 45
          
          # Ejecutar migraciones de Prisma
          echo "üóÑÔ∏è Ejecutando migraciones..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T backend npx prisma migrate deploy || echo "‚ùå Error en migraciones, continuando..."
          
          # Verificar estado de servicios
          echo "‚úÖ Verificando servicios..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod ps
          
          # Verificar conectividad
          echo "üåê Verificando conectividad..."
          sleep 10
          
          # Probar health check de nginx
          if curl -s http://localhost/nginx-health > /dev/null; then
            echo "‚úÖ Nginx est√° funcionando correctamente"
          else
            echo "‚ùå Nginx no responde al health check"
            docker-compose -f docker-compose.prod.yml --env-file .env.prod logs nginx | tail -10
          fi
          
          # Verificar servicios internos
          echo "üîç Verificando servicios internos..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T frontend wget -qO- http://localhost:3000 > /dev/null && echo "‚úÖ Frontend OK" || echo "‚ùå Frontend no responde"
          docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T backend curl -f http://localhost:3001 > /dev/null && echo "‚úÖ Backend OK" || echo "‚ùå Backend no responde"
          
          
          echo "üéâ Deploy completado!"
          echo ""
          echo "üåê La aplicaci√≥n est√° disponible en:"
          echo "   ‚úÖ HTTP:  http://stockcontrol.unlimitdevsoftware.com"
          echo ""
          echo "üìã Para habilitar HTTPS con certificados reales:"
          echo "   1. Con√©ctate al servidor: ssh root@${{ secrets.PROD_HOST }}"
          echo "   2. Ve al directorio: cd $DEPLOY_DIR"
          echo "   3. Ejecuta: chmod +x setup-ssl.sh && ./setup-ssl.sh"
          echo ""
          echo "‚ú® ¬°El deploy HTTP est√° funcionando perfectamente!"
          
    - name: Notify Success
      if: success()
      run: echo "‚úÖ Deploy exitoso a producci√≥n"
        
    - name: Notify Failure
      if: failure()
      run: echo "‚ùå Deploy fall√≥ - revisar logs"