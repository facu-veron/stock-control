version: '3.8'

services:
  # Frontend (Next.js)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: stockcontrol_frontend_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://stockcontrol.unlimitdevsoftware.com/api
    networks:
      - stockcontrol-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend (Express + TypeScript)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: stockcontrol_backend_prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://stockcontrol_user:${PROD_DB_PASSWORD}@postgres:5432/stockcontrol_prod_db
      - SHADOW_DATABASE_URL=postgresql://stockcontrol_user:${PROD_DB_PASSWORD}@postgres:5432/stockcontrol_prod_shadow
      - JWT_SECRET=${PROD_JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - PORT=3001
      - NODE_ENV=production
      - FRONTEND_URL=https://stockcontrol.unlimitdevsoftware.com
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - ALLOWED_ORIGINS=https://stockcontrol.unlimitdevsoftware.com,https://unlimitdevsoftware.com
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - RATE_LIMIT_AUTH_MAX=5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - backend_uploads:/app/uploads
    networks:
      - stockcontrol-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: stockcontrol_postgres_prod
    restart: unless-stopped
    environment:
      - POSTGRES_USER=stockcontrol_user
      - POSTGRES_PASSWORD=${PROD_DB_PASSWORD}
      - POSTGRES_DB=stockcontrol_prod_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - stockcontrol-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stockcontrol_user -d stockcontrol_prod_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: stockcontrol_redis_prod
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - stockcontrol-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx para SSL y routing
  nginx:
    image: nginx:alpine
    container_name: stockcontrol_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - certbot_webroot:/var/www/certbot:ro
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_healthy
    networks:
      - stockcontrol-network
    # Comando para validar la configuración antes de iniciar
    command: >
      sh -c "nginx -t && exec nginx -g 'daemon off;'"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Certbot para SSL automático
  certbot:
    image: certbot/certbot
    container_name: stockcontrol_certbot_prod
    volumes:
      - ./ssl:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@unlimitdevsoftware.com --agree-tos --no-eff-email -d stockcontrol.unlimitdevsoftware.com -d unlimitdevsoftware.com
    depends_on:
      - nginx
    profiles:
      - certbot  # Solo se ejecuta cuando es necesario

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
  certbot_webroot:

networks:
  stockcontrol-network:
    driver: bridge